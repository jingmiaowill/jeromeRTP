package test.com.jerome.rtp.client.control;import java.io.IOException;import java.net.InetSocketAddress;import java.net.SocketAddress;import org.glassfish.grizzly.filterchain.BaseFilter;import org.glassfish.grizzly.filterchain.FilterChainBuilder;import org.glassfish.grizzly.filterchain.FilterChainContext;import org.glassfish.grizzly.filterchain.NextAction;import org.glassfish.grizzly.filterchain.TransportFilter;import org.glassfish.grizzly.memory.HeapBuffer;import org.glassfish.grizzly.nio.transport.UDPNIOTransport;import org.glassfish.grizzly.nio.transport.UDPNIOTransportBuilder;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.jerome.rtp.protocol.data.CompoundControlPacket;import com.jerome.rtp.protocol.data.ControlPacket;import com.jerome.rtp.protocol.parse.ControlParse;import com.jerome.rtp.protocol.utils.ByteUtils;public class UE_C {	private final static Logger logger = LoggerFactory.getLogger(UE_C.class);	public static void main(String[] args) throws Exception {		byte[] packetBytes = ByteUtils.convertHexStringToByteArray("80c900012a0655f5");		FilterChainBuilder filterChainBuilder = FilterChainBuilder.stateless();		filterChainBuilder.add(new TransportFilter());		filterChainBuilder.add(new ControlParse());		filterChainBuilder.add(new ClientFilter(packetBytes));		final UDPNIOTransport transport = UDPNIOTransportBuilder.newInstance().build();		transport.setProcessor(filterChainBuilder.build());		transport.bind(6007);		transport.start();		InetSocketAddress local = new InetSocketAddress("127.0.0.1", 6007);		SocketAddress rm = new InetSocketAddress("127.0.0.1", 5001);		transport.connect(rm, local);		System.in.read();	}	static class ClientFilter extends BaseFilter {		private final byte[] packetBytes;		public ClientFilter(byte[] packetBytes) {			this.packetBytes = packetBytes;		}		@Override		public NextAction handleConnect(final FilterChainContext ctx) throws IOException {			ControlPacket decode = ControlPacket.decode(HeapBuffer.wrap(packetBytes));			CompoundControlPacket ccp = new CompoundControlPacket(HeapBuffer.wrap(packetBytes), decode);			ctx.write(ccp);			return ctx.getInvokeAction();		}		@Override		public NextAction handleRead(final FilterChainContext ctx) throws IOException {			logger.info("Receive : Control");			return ctx.getInvokeAction();		}	}}