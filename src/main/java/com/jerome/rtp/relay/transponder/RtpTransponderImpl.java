package com.jerome.rtp.relay.transponder;import java.net.URI;import java.net.URISyntaxException;import java.util.Map;import com.google.common.collect.Maps;import com.jerome.rtp.relay.RtpConfigure;import com.jerome.rtp.relay.RtpContainer;import com.jerome.rtp.relay.RtpContainerFactory;import com.jerome.rtp.relay.session.RtpSession;public class RtpTransponderImpl implements RtpTransponder {	private static RtpContainer container = null;	private final static Map<Long, RtpSession> map = Maps.newHashMap();	@Override	public void start(final String localhost, final int portBegin, final int portEnd) {		if (container == null) {			synchronized (RtpContainer.class) {				if (container == null) {					RtpConfigure config = RtpConfigure.newInstance(localhost, portBegin, portEnd);					container = RtpContainerFactory.createContainer(config);				}			}		}	}	@Override	public long createRtpSession() {		RtpSession session = container.createMultimediaSession();		map.put(session.getSessionId(), session);		return session.getSessionId();	}	@Override	public URI bind(String key, long sessionId) {		RtpSession session = map.get(sessionId);		int port = session.getRtpPort();		URI uri = null;		try {			uri = new URI(null, null, container.getLocalhost(), port, null, null, null);		} catch (URISyntaxException e) {			e.printStackTrace();		}		return uri;	}	@Override	public boolean unbind(String key, long sessionId) {		return closeSession(sessionId);	}	@Override	public boolean closeSession(long sessionId) {		RtpSession session = map.get(sessionId);		if (session != null) {			container.stopSession(session);		}		return true;	}}